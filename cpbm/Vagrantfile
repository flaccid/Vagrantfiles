# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = "cpbm"

  # set to true to reset (drop & create) the database
  reset_database = false
  #reset_database = true

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "https://s3.amazonaws.com/itmat-public/centos-6.3-chef-10.14.2.box"

  # set this to the IP address of your LAN's router, comment out if not
  # using public_network/bridged
  default_router = "192.168.0.1"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  #config.vm.network :forwarded_port, guest: 8080, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  #config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  #config.vm.network :public_network
  config.vm.network :public_network, ip: "192.168.0.105"     # with static IP, useful for server sharing

  # change/ensure the default route via the local network's WAN router,
  # useful for public_network/bridged mode
  config.vm.provision :shell, :inline => "ip route delete default 2>&1 >/dev/null || true; ip route add default via #{default_router}"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "/usr/share/cpbm-installer", "/usr/share/cpbm-installer"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider :virtualbox do |vb|
  #   # Don't boot with headless mode
  #   vb.gui = true
  #
  #   # Use VBoxManage to customize the VM. For example to change memory:
  #   vb.customize ["modifyvm", :id, "--memory", "1024"]
  # end
  #
  # View the documentation for the provider you're using for more
  # information on available options.
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--cpus", 4]
    vb.customize ["modifyvm", :id, "--memory", "8192"]
  end

  # reset the cloud portal databases to remove state for dev/test
  if reset_database
    config.vm.provision :shell, :inline => "service cloud-portal stop"
    config.vm.provision :shell, :inline => "mysql -e 'DROP DATABASE IF EXISTS `cloud_portal`;'"
    config.vm.provision :shell, :inline => "mysql -e 'DROP DATABASE IF EXISTS `cloud_reports`;'"
    config.vm.provision :shell, :inline => "mysql -e 'DROP DATABASE IF EXISTS `cloud_portal`;'"
    config.vm.provision :shell, :inline => "mysql -e 'CREATE DATABASE IF NOT EXISTS `cloud_portal`;'"
    config.vm.provision :shell, :inline => "mysql -e 'CREATE DATABASE IF NOT EXISTS `cloud_reports`;'"
    config.vm.provision :shell, :inline => "mysql -e 'CREATE DATABASE IF NOT EXISTS `cloud_portal`;'"
    config.vm.provision :shell, :inline => "service cloud-portal start"
  end
end
